"0","require(truncnorm)"
"0","Likelihood.trunc <- function(mdObj, x, theta){"
"0","  x <- as.vector(x, 'numeric')"
"0","  y <- dtruncnorm(x, a=0, b=60*60*24, mean=theta[[1]][, , , drop = TRUE], sd=theta[[2]][, , , drop = TRUE])"
"0","  return(as.numeric(y))"
"0","}"
"0","PriorDraw.trunc <- function(mdObj, n=1){"
"0","  theta <- vector(""list"", 2)"
"0","  theta[[1]] <- array(runif(n, 0, 60*60*24), dim=c(1,1,n))"
"0","  theta[[2]] <- array(1/rgamma(n, mdObj$priorParameters[1], mdObj$priorParameters[2]), dim=c(1,1,n))"
"0","  return(theta)"
"0","}"
"0","PriorDensity.trunc <- function(mdObj, theta){"
"0","  thetaDensity <- dunif(theta[[1]], 0, 60*60*24)"
"0","  thetaDensity <- thetaDensity * dgamma(1/theta[[2]], mdObj$priorParameters[1], mdObj$priorParameters[2])"
"0","  return(as.numeric(thetaDensity))"
"0","}"
"0","MhParameterProposal.trunc <- function(mdObj, oldParams){"
"0","  mhStepSize <- mdObj$mhStepSize"
"0","  newParams <- oldParams"
"0","  newParams[[1]] <- abs(oldParams[[1]] + mhStepSize[1]*rnorm(1, 0, 1.7)) %% (60*60*24)"
"0","  newParams[[2]] <- abs(oldParams[[2]] + mhStepSize[2]*rnorm(1, 0, 1.7))"
"0","  return(newParams)"
"0","}"
"0","PriorParametersUpdate.trunc <- function(mdObj, clusterParameters, n = 1) {"
"0","  hyperPriorParameters <- mdObj$hyperPriorParameters"
"0","  priorParameters <- mdObj$priorParameters"
"0","  numClusters <- dim(clusterParameters[[1]])[3]"
"0","  posteriorShape <- hyperPriorParameters[1] + priorParameters[1] * numClusters"
"0","  posteriorRate <- hyperPriorParameters[2] + sum(1/clusterParameters[[2]])"
"0","  newGamma <- rgamma(n, posteriorShape, posteriorRate)"
"0","  newPriorParameters <- matrix(c(priorParameters[1], newGamma), ncol = 2)"
"0","  mdObj$priorParameters <- newPriorParameters"
"0","  return(mdObj)"
"0","}"
