{
    "collab_server" : "",
    "contents" : "#' Create a Normal mixing distribution\n#'\n#' See \\code{\\link{DirichletProcessGaussian}} for details on the base measure.\n#'\n#'@param priorParameters Prior parameters for the base measure.\n#'@return Mixing distribution object\n#'@export\nGaussianMixtureCreate <- function(priorParameters){\n  mdobj <- MixingDistribution(\"normal\", priorParameters, \"conjugate\")\n  return(mdobj)\n}\n\nLikelihood.normal <- function(mdobj, x, theta) as.numeric(dnorm(x, theta[[1]], theta[[2]]))\n\nPriorDraw.normal <- function(mdobj, n = 1) {\n\n  priorParameters <- mdobj$priorParameters\n\n  lambda <- rgamma(n, priorParameters[3], priorParameters[4])\n  mu <- rnorm(n, priorParameters[1], (priorParameters[2] * lambda)^(-0.5))\n  theta <- list(array(mu, dim = c(1, 1, n)), array(sqrt(1/lambda), dim = c(1, 1,\n    n)))\n  return(theta)\n}\n\nPosteriorParameters.normal <- function(mdobj, x) {\n\n  priorParameters <- mdobj$priorParameters\n\n  n.x <- length(x)\n  ybar <- mean(x)\n\n  mu0 <- priorParameters[1]\n  kappa0 <- priorParameters[2]\n  alpha0 <- priorParameters[3]\n  beta0 <- priorParameters[4]\n\n  mu.n <- (kappa0 * mu0 + n.x * ybar)/(kappa0 + n.x)\n  kappa.n <- kappa0 + n.x\n  alpha.n <- alpha0 + n.x/2\n  beta.n <- beta0 + 0.5 * sum((x - ybar)^2) + kappa0 * n.x * (ybar - mu0)^2/(2 *\n    (kappa0 + n.x))\n\n  PosteriorParameters <- matrix(c(mu.n, kappa.n, alpha.n, beta.n), ncol = 4)\n  return(PosteriorParameters)\n}\n\nPosteriorDraw.normal <- function(mdobj, x, n = 1) {\n\n  PosteriorParameters_calc <- PosteriorParameters(mdobj, x)\n\n  lambda <- rgamma(n, PosteriorParameters_calc[3], PosteriorParameters_calc[4])\n  mu <- rnorm(n, PosteriorParameters_calc[1], 1/sqrt(PosteriorParameters_calc[2] *\n    lambda))\n  theta <- list(array(mu, dim = c(1, 1, n)), array(sqrt(1/lambda), dim = c(1, 1,\n    n)))\n  return(theta)\n}\n\nPredictive.normal <- function(mdobj, x) {\n\n  priorParameters <- mdobj$priorParameters\n  predictiveArray <- numeric(length(x))\n\n  for (i in seq_along(x)) {\n\n    PosteriorParameters_calc <- PosteriorParameters(mdobj, x[i])\n\n    predictiveArray[i] <- (gamma(PosteriorParameters_calc[3])/gamma(priorParameters[3])) *\n      ((priorParameters[4]^(priorParameters[3]))/PosteriorParameters_calc[4]^PosteriorParameters_calc[3]) *\n      sqrt(priorParameters[2]/PosteriorParameters_calc[2])\n  }\n  return(predictiveArray)\n}\n",
    "created" : 1507649524859.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1519190349",
    "id" : "76E2A654",
    "lastKnownWriteTime" : 1500971699,
    "last_content_update" : 1500971699,
    "path" : "~/Documents/PhD/Research/Dirichelet/dirichletprocess/R/normal_inverse_gamma.R",
    "project_path" : "R/normal_inverse_gamma.R",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}